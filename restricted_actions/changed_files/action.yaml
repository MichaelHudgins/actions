# Copyright 2025 Google LLC

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     https://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Action to use tj-actions/changed-files in a locked permissions manner
# Usage of this composite is to ensure that tj-actions/changed-files can only be used
# with repository permissions read.
name: "Changed Files"
description: 'Changed files runs tj-actions/changed-files with forced limited permissions with the set of parameters allowed'
# The verified inputs we allow usage of from the composite
inputs:
  files:
    description: |
      File and directory patterns used to detect changes (Defaults to the entire repo if unset).
      NOTE: Multiline file/directory patterns should not include quotes.
    required: false
    default: ""
# Outputs with value to our usage
outputs:
  all_changed_files:
    description: "Returns all changed files i.e. a combination of all added, copied, modified and renamed files (ACMR)"
  all_changed_files_count:
    description: "Returns the number of `all_changed_files`"
  any_changed:
    description: "Returns `true` when any of the filenames provided using the `files*` or `files_ignore*` inputs have changed. This defaults to `true` when no patterns are specified. i.e. *includes a combination of all added, copied, modified and renamed files (ACMR)*."
  only_changed:
    description: "Returns `true` when only files provided using the `files*` or `files_ignore*` inputs have changed. i.e. *includes a combination of all added, copied, modified and renamed files (ACMR)*."
runs:
  using: "composite"
  steps:
# We force the permission but we also force best practice from our caller.
# We only permit this to run with contents: read and from a PR
  - name: Verify Restrictions
    shell: bash
    env:
      GITHUB_TOKEN: ${{ github.token }}
    run: |
      echo "Verifying permissions of the github token are as restricted as expected"
      # Use curl to get the token scopes from the GitHub API
      scopes=$(curl -s -I -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/ | grep "X-OAuth-Scopes" | awk '{print $2}')

      # Check if the request was successful
      if [ -z "${scopes}" ]; then
        echo "Error: Unable to retrieve token scopes."
        exit 1
      fi
      # Print the token scopes
      echo "GitHub Token Scopes:"
      echo "${scopes}"

  # - name: Get changed files 
  #   id: changed-files
  #   uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46
